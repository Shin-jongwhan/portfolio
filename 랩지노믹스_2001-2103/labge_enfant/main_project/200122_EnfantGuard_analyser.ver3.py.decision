#!/usr/bin/env python
# python EnfantGuard_analyser.py.decision --sample=SampleName (or --sample_list=samplelist_file) --runid=RunID

import string, os, sys, time, getopt
import shutil, numpy
import Queue, threading
import copy
from rpy2.robjects import FloatVector
from rpy2.robjects.packages import importr
from Decisionsex import decision_sex
EnfantGuardDir = "/data/Analysis/Project/EnfantGuard/"

EFver=sys.argv[0].split(".")[1]

#homeDir = EnfantGuardDir + "Analysis_data/"
#bamDir  = homeDir + "bam/"
#bafDir = "/data/hanyoung/baf/pilot/"
#contraDir = "/data/hanyoung/contra/pilot/" # change at def main
homeDir = ""
bamDir = ""
bafDir = ""
contraDir = ""
contraBin = "/data/Tools/etc/CONTRA/CONTRA.v2.0.6/contra.py"
run_id = ""

visulizeBin = EnfantGuardDir + "bin/visulization_cnv_baf.r"
QCBin = EnfantGuardDir + "bin/quality_check.r"

threadNum = 5 # multi-threading
queue = Queue.Queue()

panelDir = "/data/Analysis/Project/EnfantGuard/info/"
panelFile = panelDir + "cm_panel.ver2.80bp.snp.filt.bed"
diseaseFile = panelDir + "EnfantGuard.ver3.info"
wholeChrDiseaseList = []
mosaicismList = []
femaleOnlyList = []
maleOnlyList = []
wholeChrList= []
careRegion = []
diseaseBafList = []
CallCounter = {}


windowSize = 10
lowerThreshold = 0.8
upperThreshold = 1.2
pvalue_cutoff = 0.05
yFrac_cutoff = 0.8 # chrY readmapping fraction cutoff. male: ~1.5%, female < 0.01%
#=================================================================

def RunRecord(runid, sampleid, record):
	runinfo = "/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/%s_run.info"%(runid,sampleid,sampleid)
	fw = open(runinfo, 'a')
	fw.write(record)
	fw.close()

#=================================================================
argv = sys.argv[1:]

try:
	opts, args = getopt.getopt(argv,"hs:S:r:w:",["help","sample=", "sample_list=","runid=","window="])
except getopt.GetoptError:
	print "EnfantGuard_analyser.py.decision --sample=SampleName --runid=RunID"
	sys.exit(2)
for opt, arg in opts:
	if opt in ("-h", "--help"):
		print "EnfantGuard_analyser.py.decision --sample=SampleName (or -S samplelist_file, --sample_list=samplelist_file) --runid=RunID"
		sys.exit()
	if opt in ("-r", "--runid"):
		run_id = arg
	if opt in ("-s", "--sample"):
		sampleList = [arg]
	if opt in ("-w", "--window"):
		off_target_window_size = arg
	elif opt in ("-S", "--sample_list"):
		sampleFile = arg
		sampleList = []
		fr = open(sampleFile, 'r')
		for line in fr:
			if line.strip() == "":
				continue
			lineTmp = line.strip().split('\t')
			sampleList.append(lineTmp[0])
		fr.close()

homeDir = "/data/Analysis/Project/EnfantGuard/Analysis_data/" + run_id + "/" + sampleList[0] + "/"
bamDir  = homeDir + "bam/"
if not os.path.exists(bamDir):
	os.makedirs(bamDir)
bafDir = homeDir + "baf/"
if not os.path.exists(bafDir):
	os.makedirs(bafDir)
contraDir = homeDir + "contra/"
CopywriteRDir = homeDir + "CopywriteR/"

#==========================================================================
def InformationParser():

        fr = open(diseaseFile, 'r')

        for lines in fr:
                if lines.strip() == '':
                        continue
                line = lines.strip().split('\t')
                if(len(line) > 11):
                        linesInfo = line[11].split(',')
                        for lineInfo in linesInfo:
                                if lineInfo == "CR":
                                        careRegion.append([line[0],line[1],line[2],line[3]])
                                if lineInfo == "MS":
                                        mosaicismList.append(line[3])
                                if lineInfo == "WD":
                                        wholeChrDiseaseList.append(line[3])
                                        wholeChrList.append(line[0])
				if lineInfo == "DB":
					diseaseBafList.append(line[3])
                                if lineInfo == "FO":
                                        femaleOnlyList.append(line[3])
                                if lineInfo == "CC":
                                        if line[3] not in CallCounter:
                                                CallCounter[line[3]]=0
                                        else :
                                                CallCounter[line[3]]=CallCounter[line[3]]+1
                                if lineInfo == "MO":
                                        maleOnlyList.append(line[3])

        fr.close()

#========================================================================
#def DecisionSex(sample):
#	statFile = homeDir + sample +'/'+ sample + ".rmdup.HG19.reads.stats"
#
#	fr = open(statFile, 'r')
#	readSum = 0
#	readNumList = []
#
#	for line in fr:
#		if line.strip() == '':
#3			continue
#		lineTmp = line.split('\t')
#		if lineTmp[0] == 'chrM':
#			break
#		readSum += int(lineTmp[2])
#		readNumList.append(int(lineTmp[2]))
#	yfraction = readNumList[23]/float(readSum)*100.0
#	if yfraction <= yFrac_cutoff: # chrY readmapping fraction cutoff: 0.1 male: ~1.5%, female < 0.01%
#		sex = "female"
#	else:
#		sex = "male"
#
#	return sex
		
#==========================================================================
def trimWindow(windL, gltag):
	newL = []
	tag = 0
	for i in range(len(windL)):
		linfo = windL[i]
		if gltag == "gain" and linfo[9] >= upperThreshold:
			tag = i
			break
		elif gltag == "loss" and linfo[9] <= lowerThreshold:
			tag = i
			break
	newL = windL[tag:]
	return newL

#==========================================================================
def trimWindow_back(windL, gltag):
	newL = []
	tag = 0
	for i in range(len(windL)):
		linfo = windL[-(i+1)]
		if gltag == "gain" and linfo[9] >= upperThreshold:
			tag = -(i+1)
			break
		elif gltag == "loss" and linfo[9] <= lowerThreshold:
			tag = -(i+1)
			break
	newL = windL[:tag]
	return newL

#==========================================================================
def evaluateWindow(windowL, newL, careRegion):
	mark = 0
	# mark = 0: current windowL nothing special, so sliding 
	# mark = 1: current windowL containing something special signal, so extend the list
	# mark = 2: including newL causes current windowL unsignificant, so stop extending, analyze the current windowL and make a new windowL
	gainNum = 0 # with pvalue < 0.05
	lossNum = 0 # with pvalue < 0.05
	gainNum2 = 0 # with adj_pvalue < 0.05
	lossNum2 = 0 # with adj_pvalue < 0.05
	gainlossTag = "neutral"
	spTag = "none"
	chrNum = windowL[0][1]
	# listL = [geneSymbol, chrNum, startPos, endPos, pvalue, adj_pvalue, gainloss, tumor_rd, normal_rd, ratio_rd]
	for listL in windowL:
		ratio_rd = listL[9]
		pval = listL[4]
		adjpval = listL[5]
		l_start = listL[2]
		l_end = listL[3]
		if ratio_rd >= upperThreshold and pval <= pvalue_cutoff:
			gainNum += 1
			if adjpval <= pvalue_cutoff:
				gainNum2 += 1
		elif ratio_rd <= lowerThreshold and pval <= pvalue_cutoff:
			lossNum += 1
			if adjpval <= pvalue_cutoff:
				lossNum2 += 1
				for posI in careRegion:
					if chrNum != posI[0]:
						continue
					if l_end >= int(posI[1]) and l_start <= int(posI[2]):
						spTag = "hit"
	if gainNum2 >= 1 and gainNum >= 3 and float(gainNum)/len(windowL) >= 0.3:
		gainlossTag = "gain"
		mark = 1
	elif gainNum >= 5 and float(gainNum)/len(windowL) >= 0.5:
		gainlossTag = "gain"
		mark = 1
	elif lossNum2 >= 1 and lossNum >= 3 and float(lossNum)/len(windowL) >= 0.3:
		gainlossTag = "loss"
		mark = 1
	elif lossNum >= 5 and float(lossNum)/len(windowL) >= 0.5:
		gainlossTag = "loss"
		mark = 1
	elif spTag == "hit" and float(lossNum2)/len(windowL) >= 0.08:
		gainlossTag = "loss"
		mark = 1
	if mark == 1:
		windowL = trimWindow(windowL, gainlossTag)
	if len(windowL) < windowSize:
		return [mark, gainlossTag, windowL]
	elif mark == 1 and newL != []:
		#if (gainlossTag == "gain" and newL[9] <= lowerThreshold and newL[5] <= pvalue_cutoff) or (gainlossTag == "loss" and newL[9] >= upperThreshold and newL[5] <= pvalue_cutoff):
		if (gainlossTag == "gain" and newL[9] <= lowerThreshold) or (gainlossTag == "loss" and newL[9] >= upperThreshold):
			mark = 2
		else:
			if newL[9] >= upperThreshold and newL[4] <= pvalue_cutoff:
				gainNum += 1
				if newL[5] <= pvalue_cutoff:
					gainNum2 += 1
			elif newL[9] <= lowerThreshold and newL[4] <= pvalue_cutoff:
				lossNum += 1
				if newL[5] <= pvalue_cutoff:
					lossNum2 += 1
					for posI in careRegion:
						if chrNum != posI[0]:
							continue
						if l_end >= int(posI[1]) and l_start <= int(posI[2]):
							spTag = "hit"
							break
			if gainNum2 >= 1 and gainNum >= 3 and float(gainNum)/(len(windowL)+1) >= 0.3:
				gainlossTag = "gain"
				mark = 1
			elif gainNum >= 5 and float(gainNum)/(len(windowL)+1) >= 0.5:
				gainlossTag = "gain"
				mark = 1
			elif lossNum2 >= 1 and lossNum >= 3 and float(lossNum)/(len(windowL)+1) >= 0.3:
				gainlossTag = "loss"
				mark = 1
			elif lossNum >= 5 and float(lossNum)/(len(windowL)+1) >= 0.5:
				gainlossTag = "loss"
				mark = 1
			elif lossNum2 >= 2 and spTag == "hit" and float(lossNum2)/(len(windowL)+1) >= 0.08: #######red point 2
				gainlossTag = "loss"
				mark = 1
			else:
				mark = 2
		return [mark, gainlossTag, windowL]
	else:
		return [mark, gainlossTag, windowL]

#==========================================================================
def analyzeWindow(windowL, gainTag, sigLTmp,significantListFile):
	#significantListFileName = homeDir + "significant.list"
	#significantListFile = open(significantListFileName,'w')
	# listL = [geneSymbol, chrNum, startPos, endPos, pvalue, adj_pvalue, gainloss, tumor_rd, normal_rd, ratio_rd]
	windowL = trimWindow_back(windowL, gainTag)
	sigL = copy.deepcopy(sigLTmp)

	if windowL == []:
		return sigL
	newL = []
	ratioSum = 0.0
	chrNum = windowL[0][1]
	red = 0 # adjPvalue <= 0.05
	orange = 0 # pvalue <= 0.05
	black = 0 # others
	for wind in windowL:
		if gainTag == "gain" and wind[9] >= upperThreshold:
			newL.append(wind)
			ratioSum += wind[9]
			if wind[5] <= pvalue_cutoff:
				red += 1
			elif wind[4] <= pvalue_cutoff:
				orange += 1
			else:
				black += 1
		elif gainTag == "loss" and wind[9] <= lowerThreshold:
			newL.append(wind)
			ratioSum += wind[9]
			if wind[5] <= pvalue_cutoff:
				red += 1
			elif wind[4] <= pvalue_cutoff:
				orange += 1
			else:
				black += 1
	
	if newL != [] and ( (red >= 2) or (orange >= 5) or (red >=1 and orange >= 2) ):
	#if newL != []:
		ratioAvg = ratioSum/len(newL)
		startPos = newL[0][2]
		endPos = newL[-1][3]
		posLen = endPos - startPos + 1
		if posLen >= 1000000:
			posLenChar = "%.2f Mb" % (float(posLen)/1000000)
		else:
			posLenChar = "%.1f Kb" % (float(posLen)/1000)
		sigL.append([chrNum, startPos, endPos, ratioAvg, red, orange, black, newL])
		#chrNum\tstart\tend\trange\tavgRatio\tNo.spot\tRed.spot\tOrange.spot\tBlack.spot
		significantListFile.write("%s\t%d\t%d\t%s\t%.2f\t%d\t%d\t%d\t%d\n" % (chrNum, startPos, endPos, posLenChar, ratioAvg, len(newL), red, orange, black))
	#else:
	
	return sigL

#==========================================================================
def quality_score(sampleName):

	scoreFileName = "%sscore.tmp" % homeDir
	
	RCMD = "Rscript %s %stable/%s.CNATable.20rd.20bases.20bins.txt %s 2> %s.err" %(QCBin, contraDir,sampleName,scoreFileName,scoreFileName)

	os.system(RCMD)

	scoreFile = open(scoreFileName,'r')
	linkage = scoreFile.readline()
	linkage_array = linkage.split()
	scoreFile.close()
	
	return linkage_array[1]

#================================================================
def diseaseCalling(dDic, sigL, sex):
	# dDic[disease] = [[chrNum, startPos, endPos, gainlosstag, avg_ratio_cutoff, probeNum],[]]
	# sigL = [chrNum, startPos, endPos, ratioAvg, red, orange, black, windowL]
	# windowL = [[geneSymbol, chrNum, startPos, endPos, pvalue, adj_pvalue, gainloss, tumor_rd, normal_rd, ratio_rd], []]
	diseaseCallList = []
	for sigInfo in sigL:
		chrNum = sigInfo[0]
		sPos = sigInfo[1]
		ePos = sigInfo[2]
		ratioA = sigInfo[3]
		wList = sigInfo[7]
		red = sigInfo[4]
		orange = sigInfo[5]
		if red+orange < 3 and ratioA > 0.6:
			continue
		dTag = []
		for disease in dDic.keys():
			if (disease in femaleOnlyList and sex == "male") or (disease in maleOnlyList and sex == "female"):
				continue
			for dInfo in dDic[disease]:
				if chrNum != dInfo[0]:
					continue
				gainlossTag = dInfo[3]

######################### after
				dProbeNum = dInfo[7]       ########## change line : dProbeNum = dInfo[5]
				if gainlossTag == "loss":
					ratio_cutoff = dInfo[5]
					ratio_cutoff_ext = dInfo[4]
				else:
					ratio_cutoff = dInfo[4]
					ratio_cutoff_ext = dInfo[5] ########## change line : new
				min_cutoff = dInfo[4]
				max_cutoff = dInfo[5]
				ratio_cov = dInfo[6]  ############# change line : new
				if ePos > dInfo[1] and sPos < dInfo[2] and ratioA >= min_cutoff and ratioA <= max_cutoff:   
				#if ePos > dInfo[1] and sPos < dInfo[2]:

####### change line : 
				#if ePos > dInfo[1] and sPos < dInfo[2] and ((gainlossTag == "loss" and ratioA <= ratio_cutoff) or (gainlossTag == "gain" and ratioA >= ratio_cutoff)):
					if sPos > dInfo[1] and ePos < dInfo[2]:
						overlapRegion_pct = float(ePos-sPos)/(dInfo[2]-dInfo[1])*100.0
					elif sPos < dInfo[1] and ePos <dInfo[2]:
						overlapRegion_pct = float(ePos-dInfo[1])/(dInfo[2]-dInfo[1])*100.0
					elif sPos > dInfo[1] and ePos > dInfo[2]:
						overlapRegion_pct = float(dInfo[2]-sPos)/(dInfo[2]-dInfo[1])*100.0
					else:
						overlapRegion_pct = 100.0
					if (disease in wholeChrDiseaseList or disease in mosaicismList) and overlapRegion_pct < 80:
						continue
					elif overlapRegion_pct < ratio_cov: ######## change line : new
						continue ######## change line : new
					
					dTag.append([0, overlapRegion_pct, disease, dInfo])

		if dTag == []:
			continue

		#dTag.sort(reverse=True)
		dTag2 = []
		for k in range(len(dTag)):
			dcall = dTag[k]
			#dcall = [overlap_probeNum, overlapRegion_pct, disease, dInfo, red, orange, black, new_windowList]
			#dinfo = [chrNum, startPos, endPos, gainlosstag, avg_ratio_cutoff, probeNum]
			disease = dcall[2]
			disease_start = dcall[3][1]
			disease_end = dcall[3][2]
			probeNum = 0
			red = 0
			orange = 0
			black = 0
			newSum = 0
			wList2 = []
                        dgainTag = dcall[3][3]
			if dgainTag == "gain":
				dRatioCutoff = dcall[3][4]
				dRatioCutoff_ext = dcall[3][5]
			else:
				dRatioCutoff = dcall[3][5]
				dRatioCutoff_ext = dcall[3][4]
			dRatioCov = dcall[3][6]
			dProbeNum = dcall[3][7]
			for winfo in wList:
				start_pos = winfo[2]
				end_pos = winfo[3]
				pval = winfo[4]
				adj_pval = winfo[5]
				if start_pos < disease_end and end_pos > disease_start:
					newSum += winfo[9]
					if adj_pval <= pvalue_cutoff:
						red += 1
						wList2.append(winfo)
					elif pval <= pvalue_cutoff:
						orange += 1
						wList2.append(winfo)
					else:
						black += 1
						wList2.append(winfo)
					probeNum += 1
			if red+orange+black != 0:
				newRatioA = float(newSum)/(red+orange+black)
			else:
				newRatioA = 0.0
			dTag[k][0] = probeNum
			dTag[k].extend([red, orange, black])
			dTag[k].extend([wList2])
			
			if (dgainTag == "gain" and newRatioA < dRatioCutoff) or (dgainTag == "loss" and newRatioA > dRatioCutoff):
				continue
			elif red+orange < 3 and newRatioA > 0.6:
				continue
			elif dcall[2] in wholeChrDiseaseList and (float(probeNum)/dProbeNum < 0.8 or (dgainTag == "gain" and newRatioA < dRatioCutoff) or (dgainTag == "loss" and newRatioA > dRatioCutoff)):
				continue
			elif dcall[2] in mosaicismList and (float(probeNum)/dProbeNum < 0.4 or (dgainTag == "gain" and newRatioA < dRatioCutoff) or (dgainTag == "loss" and newRatioA > dRatioCutoff)):
				continue
			dTag2.append(dTag[k])
		if dTag2 != []:
			dTag2.sort(reverse=True)
			diseaseCallList.append([sigInfo, dTag2])

	return diseaseCallList

#==========================================================================
class ThreadAlign(threading.Thread):
	def __init__(self,queue):
		threading.Thread.__init__(self)
		self.queue = queue
	def run(self):
		while True:
			self.queue.task_done()

#==========================================================================                                                                      
def sortDList(x):
        return x[14]

#=========================================================================
def editDcallFile(SampleName):
	copyDcallFile = "cp %sdecision_call.result2 %s%s_decision_call.result.tmp" %(homeDir,homeDir,SampleList[0])
        os.system(copyDcallFile)

	SigListFileName = "%s%s_significant.list" %(homeDir,SampleList[0])
	SigListFile = open(SigListFileName,'r')

	DcallFileTmpName = "%s%s_decision_call.result.tmp" %(homeDir,SampleList[0])
	DcallFileTmp = open(DcallFileTmpName,'r')

        DcallFileName = "%s%s_decision_call.result2" %(homeDir,SampleList[0])
	DcallFile = open(DcallFileName,'w')

        Dname = "Normal"
        firstLine = "T"
	AllDListForSort = []
        for lines in DcallFileTmp:
	        if firstLine == "T" :
	                DcallFile.write(lines)
			firstLine = "F"
                        continue
                line = lines.strip().split('\t')
		line[14] = int(line[14])
	        AllDListForSort.append(line)
	        #Dname = line[9]                                                                                                                 
        AllDListForSort.sort(key=sortDList, reverse=True)

        for lines in AllDListForSort:
                DcallFile.write("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%d\t%s\t%s\t%s\t%s\t%s\n" %(lines[0], lines[1], lines[2], lines[3], lines[4], lines[5], lines[6], lines[7], lines[8], lines[9], lines[10], lines[11], lines[12], lines[13], lines[14], lines[15], lines[16], lines[17], lines[18], lines[19]))

	for lines in SigListFile:
		NotHaveDList = "T"
		line = lines.strip().split('\t')
		for DList in AllDListForSort:
			if ( DList[0] == line[0] ) and ( DList[1] == line[1] ) and ( DList[2] == line[2]):
				NotHaveDList = "F"
		if NotHaveDList == "T":
			DcallFile.write("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" %(line[0],line[1],line[2],line[3],line[4],line[5],line[6],line[7],line[8]))

        DcallFileTmp.close()
        DcallFile.close()
	SigListFile.close()

#==========================================================================          

def SampleMixCheck(sample):
        BAFFileName = "/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/baf/%s.snp138_minR20_minMapQ15_minBaseQ20.baf" %(run_id,sample,sample)
        BAFFile = open(BAFFileName,'r')

        #print BAFFileName

        PointNum = 0
        ErrorPointNum = 0
        for lines in BAFFile:
                line=lines.strip().split('\t')
                Chromosome = line[0]
                Position = int(line[1])
                BAFValue = float(line[2])
                if ( Chromosome == "chrX" ) or ( Chromosome == "chrY" ):
                        continue
                PointNum = PointNum + 1
                if ( BAFValue > 75 ) and ( BAFValue < 95 ) :
                        ErrorPointNum = ErrorPointNum + 1
        BAFFile.close()
	if PointNum == 0:
		ErrorRatio = 1
        else:
		ErrorRatio = float(ErrorPointNum)/float(PointNum)

        print "Error BAF Rate : ", ErrorRatio

        SampleMixEstFileName = "/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/SampleMixed.est" %(run_id,sample)
        SampleMixEst = open(SampleMixEstFileName,'w')

        if ErrorRatio > 0.01:
                print "Sample Mixed!"
                SampleMixEst.write("Fail")
        else:
                print "Sample not Mixed!"
                SampleMixEst.write("Pass")

		
def Count_BAF_Fil_Line_Number(runid,sample):
	
	BAFFileName = "/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/baf/%s.snp138_minR20_minMapQ15_minBaseQ20.baf" %(runid,sample,sample)
	BAFFile = open(BAFFileName,'r')


	BAFLineNum = 0
	for lines in BAFFile:
		BAFLineNum = BAFLineNum + 1
	
	BAFFile.close()
	return BAFLineNum

def CopywriteRRatio(sample,run_id,sex):


	############Raw data input#############
	CopywriteRFileName = "%sCNAprofiles/%s_segment.data.txt" %(CopywriteRDir,sample)
	CopywriteRFile = open(CopywriteRFileName, 'r')

	CopywriteRList = []
	RatioList = []
	ChrList = []
	for lines in CopywriteRFile:
		line = lines.strip().split('\t')
		if '"chrom"' in line:
			continue
		if "NA" in line:
				continue
		if ( sex == "female" ) and ( line[1] == "24" ):
				continue
		if line[1] == "23":
			chrNum = "chrX"
		elif line[1] == "24":
			chrNum = "chrY"
		else:
			chrNum = "chr%s" %line[1]
			
		if len(line) > 6:
			Ratio = float(line[3]) ## normal control
		else :
			Ratio = float(line[4])
		RatioList.append(Ratio)
		ChrList.append(chrNum)
	CopywriteRFile.close()
	

	return RatioList, ChrList
		

def ContraRatio(sample,run_id,sex):     # no use


	############Raw data input#############
	contraFileName = "%stable/%s.CNATable.20rd.20bases.20bins.txt" %(contraDir,sample)
	ContraFile = open(contraFileName, 'r')

	ContraFileList = []
	RatioList = []
	ChrList = []
	for lines in ContraFile:
		line = lines.strip().split('\t')
		if line[14] == "tumour.rd":
			continue
		#Ratio = float(line[14])/float(line[15])
		Ratio = pow(2,float(line[7]))
		chrNum = line[3]
		RatioList.append(Ratio)
		ChrList.append(chrNum)
	ContraFile.close()
	

	return RatioList, ChrList

def ContraCNValue(sample,run_id,sex):       # no use


	############Raw data input#############
	contraFileName = "%stable/%s.CNATable.20rd.20bases.20bins.txt" %(contraDir,sample)
	ContraFile = open(contraFileName, 'r')

	ContraFileList = []
	RatioList = []
	ChrList = []
	for lines in ContraFile:
		line = lines.strip().split('\t')
		if line[14] == "tumour.rd":
			continue
		#Ratio = float(line[14])/float(line[15])
		Ratio = pow(2,float(line[7]))
		chrNum = line[3]
		RatioList.append(Ratio)
		ChrList.append(chrNum)
	ContraFile.close()
	

	return RatioList, ChrList
					

def Count_BAF_Fil_Line_Number(runid,sample):        # no use
	
	BAFFileName = "/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/baf/%s.snp138_minR20_minMapQ15_minBaseQ20.baf" %(runid,sample,sample)
	BAFFile = open(BAFFileName,'r')
	#print BAFFileName

	BAFLineNum = 0
	for lines in BAFFile:
		BAFLineNum = BAFLineNum + 1
	
	BAFFile.close()
	return BAFLineNum

				
				#==========================================================================
def main(argv):

	start = time.time()
	InformationParser() 
	Sex,yfraction=decision_sex(run_id, sampleList[0])
	RunRecord(run_id, sampleList[0], "EF_Disease file version : EnfantGuard.ver3.info")
	#SampleMixCheck(sampleList[0])
	#Sex,yfraction=decision_sex(run_id, sampleList[0])
	BAFLineNum = Count_BAF_Fil_Line_Number(run_id,sampleList[0])

	#####plot######
	PlotRefereshCMD = "python /data/Analysis/Project/EnfantGuard/bin/Plot_Refresh.py %s" %sampleList[0]
	os.system(PlotRefereshCMD)	

	plotFile = "%s%s_EnfantGuard_plot.pdf" %(homeDir,sampleList[0])

	if BAFLineNum > 30 :
		CMD = "Rscript /data/Analysis/Project/EnfantGuard/bin/Viz_EnfantGuard.ver2.R %stable/%s.CNATable.20rd.20bases.20bins.txt %s%s.snp138_minR20_minMapQ15_minBaseQ20.baf %sCNAprofiles/%s_segment.data.txt %sCNAprofiles/%s_segment.output.txt %sCNAprofiles/%s_segment.segRows.txt %s %s %s" %(contraDir,sampleList[0],bafDir,sampleList[0],CopywriteRDir,sampleList[0],CopywriteRDir,sampleList[0],CopywriteRDir,sampleList[0],sampleList[0],plotFile,Sex)
		RunRecord(run_id, sampleList[0], "\nEF_Vizualization R script version : Viz_EnfantGuard.ver2.R"+"\n")
	else :
		CMD = "Rscript /data/Analysis/Project/EnfantGuard/bin/Viz_EnfantGuard.ver3.R %sCNAprofiles/%s_segment.data.txt %sCNAprofiles/%s_segment.output.txt %sCNAprofiles/%s_segment.segRows.txt %s %s %s" %(CopywriteRDir,sampleList[0],CopywriteRDir,sampleList[0],CopywriteRDir,sampleList[0],sampleList[0],plotFile,Sex)
		RunRecord(run_id, sampleList[0], "\nEF_Vizualization R script version : Viz_EnfantGuard.ver3.R"+"\n")
		#CMD = "Rscript /data/Analysis/Project/EnfantGuard/bin/Viz_EnfantGuard.ver2.NonePanel.R %sCNAprofiles/segment.data.txt %sCNAprofiles/segment.output.txt %sCNAprofiles/segment.segRows.txt %s %sEnfantGuard_plot.pdf" %(CopywriteRDir,CopywriteRDir,CopywriteRDir,sampleList[0],homeDir)
	os.system(CMD)

	jpg_plot = "convert -background white -alpha remove -density 600 -geometry 1000 %s[0] %s%s_EnfantGuard_plot.jpg" %(plotFile,homeDir,sampleList[0])
	os.system(jpg_plot)

	for i in range(1,25):
		jpg_plot = "convert -background white -alpha remove -density 600 -geometry 1000 %s[%d] %s%s_EnfantGuard_plot_chr%d.jpg" %(plotFile,i,homeDir,sampleList[0],i)
		#os.system(jpg_plot)


###############


	matrixStats = importr('matrixStats')

	significantListFileName = homeDir + "%s_significant.list"%(sampleList[0])
	significantListFile = open(significantListFileName,'w')

	#decisionFileName = homeDir + "decision_call.result2"
	#decisionFile = open(decisionFileName,'w')

	###########CopywriteR load#########
	CopywriteRFileName = "%sCopywriteR/CNAprofiles/%s_segment.data.txt" %(homeDir,sampleList[0])
	CopywriteRFile = open(CopywriteRFileName,'r')
	header="T"
	CopywriteRLog2RatioValue=[]
	for lines in CopywriteRFile:
		if header == "T":
			header = "F"
			continue 		# delete header line
		line = lines.strip().split('\t')
		
		if len(line) > 6:
			if line[3] == "NA": #########
				continue
			CopywriteRLog2RatioValue.append(float(line[3]))
		else :
			if line[4] == "NA": #########
				continue
			CopywriteRLog2RatioValue.append(float(line[4]))
	CopywriteRFile.close()
	##################
	

	#fr = open(careRegionFile, 'r')
	#for line in fr:
	#	if line.strip() == "":
	#		continue
	#	lineTmp = line.strip().split('\t')
	#	if lineTmp != []:
	#		careRegion.append(lineTmp)
	#fr.close()
	
	#for posInfo in careRegion:


	for sampleName in sampleList:
		sex, yfraction=decision_sex(run_id, sampleName)

		ratioList = []
		chrList = []
		
		BAFLineNum = Count_BAF_Fil_Line_Number(run_id,sampleList[0])
		if BAFLineNum < 30:
			ratioList,chrList=CopywriteRRatio(sampleName,run_id,sex)
		else :
			ratioList,chrList=ContraRatio(sampleName,run_id,sex)
		#ratioList.append(ratio_rd)
		#chrList.append(chrNum)
		avgRatio = numpy.mean(ratioList)
		varRatio = numpy.var(ratioList)
		
		#for tmptmp in ratioList:
		#	print tmptmp
		#print "tmptmp"
		#matrixStats
		FloatOnTargetRatioList = FloatVector(ratioList)
		#OnTargetmadDiff = float(matrixStats.madDiff(FloatOnTargetRatioList)[0])		
		OnTargetmadDiff = 0.0
		FloatOffTargetRatioList = FloatVector(CopywriteRLog2RatioValue)
		OffTargetmadDiff = float(matrixStats.madDiff(FloatOffTargetRatioList)[0])
		

                ######### sex & Y_fraction		
		CopywriteRLogFileName = "%sCopywriteR/CNAprofiles/CopywriteR.log" %homeDir
		CopywriteRLogFile = open(CopywriteRLogFileName, 'r')
		Detect_On_Off_target = "F"
		RmdupBamFile="%s.rmdup.HG19.bam" %sampleName
		NormalBamFile="Normal.rmdup.HG19.bam"

		while True:                        
			line = CopywriteRLogFile.readline().strip().split(' ')		# line ex) "2020010414508-EF3-LT-LR-Merged.rmdup.HG19.bam 17366109          14960004"
			if Detect_On_Off_target == "T":
				line2 = [m for m in line if m != ''] 		# line ex) "                                               unmappable.or.mitochondrial"
				ProperRead = line2[1:] 		# ex) ProperRead[0] 17366109 [1] 14960004
				
				while True:
					line3 = CopywriteRLogFile.readline().strip().split(' ')
					line4 = [m for m in line3 if m != '']
					line5 = CopywriteRLogFile.readline().strip().split(' ')
					line6 = [m for m in line5 if m != '']
					
					if NormalBamFile in line4:
						line4 = line6
						line5 = CopywriteRLogFile.readline().strip().split(' ')
						line6 = [m for m in line5 if m != '']
					
					if RmdupBamFile in line6:
						appendLine=line6[1:]
						ProperRead = ProperRead + appendLine
					else:
						On_target_Read=int(ProperRead[4])
						Off_target_Read=int(ProperRead[3])
						break
						"""
						ex)
                                                total total.properreads -> Detect_On_Off_target = "T"
						2020010414508-EF3-LT-LR-Merged.rmdup.HG19.bam 17366109          14960004 -> [0] 17366109  [1] 14960004
                                                unmappable.or.mitochondrial
						2020010414508-EF3-LT-LR-Merged.rmdup.HG19.bam                       11242 -> [2] 11242
                                                off.target on.target
						2020010414508-EF3-LT-LR-Merged.rmdup.HG19.bam   14748620    200142 -> [3] 14748620 [4] 200142
						"""

				On_target_Read_Ratio = float(On_target_Read) / float(On_target_Read+Off_target_Read)
				break
			else:
				if "total" in line:
					Detect_On_Off_target = "T"
		CopywriteRLogFile.close()	
		chrAllList = ["chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY"]
		ratio_report_output = homeDir + "%s_ratio.report"%(sampleName)
		ratio_report_outputFile = open(ratio_report_output, 'w')

		ratio_report_outputFile.write("Y_fraction\tsex\tAvr.Ratio\tVar.Ratio\tAdj.Var.Ratio\tOn-target-MAD\tOff-target-MAD\tOn-target-Read\tOff-target-Read\tOn-target-Read.Ratio\tOff_chr1.Avr.Ratio\tOff_chr2.Avr.Ratio\tOff_chr3.Avr.Ratio\tOff_chr4.Avr.Ratio\tOff_chr5.Avr.Ratio\tOff_chr6.Avr.Ratio\tOff_chr7.Avr.Ratio\tOff_chr8.Avr.Ratio\tOff_chr9.Avr.Ratio\tOff_chr10.Avr.Ratio\tOff_chr11.Avr.Ratio\tOff_chr12.Avr.Ratio\tOff_chr13.Avr.Ratio\tOff_chr14.Avr.Ratio\tOff_chr15.Avr.Ratio\tOff_chr16.Avr.Ratio\tOff_chr17.Avr.Ratio\tOff_chr18.Avr.Ratio\tOff_chr19.Avr.Ratio\tOff_chr20.Avr.Ratio\tOff_chr21.Avr.Ratio\tOff_chr22.Avr.Ratio\tOff_chrX.Avr.Ratio\tOff_chrY.Avr.Ratio\tOn_chr1.Avr.Ratio\tOn_chr2.Avr.Ratio\tOn_chr3.Avr.Ratio\tOn_chr4.Avr.Ratio\tOn_chr5.Avr.Ratio\tOn_chr6.Avr.Ratio\tOn_chr7.Avr.Ratio\tOn_chr8.Avr.Ratio\tOn_chr9.Avr.Ratio\tOn_chr10.Avr.Ratio\tOn_chr11.Avr.Ratio\tOn_chr12.Avr.Ratio\tOn_chr13.Avr.Ratio\tOn_chr14.Avr.Ratio\tOn_chr15.Avr.Ratio\tOn_chr16.Avr.Ratio\tOn_chr17.Avr.Ratio\tOn_chr18.Avr.Ratio\tOn_chr19.Avr.Ratio\tOn_chr20.Avr.Ratio\tOn_chr21.Avr.Ratio\tOn_chr22.Avr.Ratio\tOn_chrX.Avr.Ratio\tOn_chrY.Avr.Ratio\n")
		ratio_report_outputFile.write("%s\t%s\t%.2f\t%.2f\t0.0\t%.3f\t%.3f\t%d\t%d\t%.2f" % (yfraction, sex,avgRatio,varRatio,OnTargetmadDiff,OffTargetmadDiff,On_target_Read,Off_target_Read,On_target_Read_Ratio))
		


##############off target ratio############
		ratioList,chrList=CopywriteRRatio(sampleName,run_id,sex)
		
		for chrlists in chrAllList : 
			chrRatioList = []

			for i in range(len(ratioList)) :        #len(ratioList) == len(chrlist)
				if chrList[i] == chrlists :
					appendList = pow(2.0,ratioList[i])
					#if ( ( chrlists == "chrX" ) or ( chrlists == "chrY" ) ) and ( sex == "male" ):
					#	appendList = appendList * 2.0
					if appendList > 5 :
						appendList = 5

					chrRatioList.append(float(appendList))
					
			if len(chrRatioList) == 0:
				ChrAvgRatio = 0
			else :
				ChrAvgRatio = numpy.mean(chrRatioList)
			if BAFLineNum < 30:
				#ChrAvgCNV = pow(2,ChrAvgRatio)
				ChrAvgCNV = numpy.absolute(ChrAvgRatio)
			else :
				ChrAvgCNV = ChrAvgRatio
				ChrAvgCNV = ChrAvgCNV/2.0
			ratio_report_outputFile.write("\t%.3f" %ChrAvgCNV)

##############on target ratio############			

		if BAFLineNum > 30:
			ratioList,chrList=ContraRatio(sampleName,run_id,sex)
						
			for chrlists in chrAllList : 
				chrRatioList = []

				for i in range(len(ratioList)) :
					if chrList[i] == chrlists :
						appendList = ratioList[i]
						if appendList > 5 :
							appendList = 5

						chrRatioList.append(float(appendList))
				if len(chrRatioList) == 0:
					ChrAvgRatio = 0
				else :
					ChrAvgRatio = numpy.mean(chrRatioList)
				ratio_report_outputFile.write("\t%.2f" %ChrAvgRatio)
		else:
			for chrlists in chrAllList : 
				ratio_report_outputFile.write("\t0")
				
			
			
		ratio_report_outputFile.write("\n")
		ratio_report_outputFile.close()
###################### ratio end################




	#decisionFile.close()
	significantListFile.close()     # ? 열고서 안 씀


	#editDcallFile(sampleList[0])

	os.chdir("/data/Analysis/Project/EnfantGuard/bin")

	newCallCMD = "python EnfantGuard_analyser.ver3.py.decision.call --runid=%s --sample=%s --window=%s" %(run_id,sampleList[0],off_target_window_size)
	os.system(newCallCMD)

	ClinVarCNVAnnotationCMD = "python ClinVarCNVAnnotation.py %s %s" %(run_id,sampleList[0])
	os.system(ClinVarCNVAnnotationCMD)
	
	DGVAnnotationCMD = "python DGVAnnotation.ver2.py %s %s" %(run_id,sampleList[0])
	os.system(DGVAnnotationCMD)
	
	DECIPHERPopulationAnnotationCMD = "python DECIPHERPopulationAnnoataion.py %s %s" %(run_id,sampleList[0])
	os.system(DECIPHERPopulationAnnotationCMD)
	
	IssueReportCMD = "python IssueReport.py %s %s" %(run_id,sampleList[0])
	print IssueReportCMD
	os.system(IssueReportCMD)
	
	os.remove("/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/%s/%s.rmdup.HG19.bed" % (run_id,sampleList[0],sampleList[0],sampleList[0]))
	os.remove("/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/%s/%s.sorted.HG19.bed" % (run_id,sampleList[0],sampleList[0],sampleList[0]))
	os.remove("/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/%s/%s.sorted.HG19.bam" % (run_id,sampleList[0],sampleList[0],sampleList[0]))
	os.remove("/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/FASTQ/%s-cleaned_2.fastq.gz" % (run_id,sampleList[0],sampleList[0]))
	os.remove("/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/FASTQ/%s-cleaned_1.fastq.gz" % (run_id,sampleList[0],sampleList[0]))
	os.remove("/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/%s/%s_1.fastq.gz" % (run_id,sampleList[0],sampleList[0],sampleList[0]))
	os.remove("/data/Analysis/Project/EnfantGuard/Analysis_data/%s/%s/%s/%s_2.fastq.gz" % (run_id,sampleList[0],sampleList[0],sampleList[0]))	
			
	print "\n py.decision Elapsed Time: %s" % (time.time() - start)

	
	#print quality_score(sampleList[0])
#==========================================================================
if __name__ == "__main__":
	main(sys.argv[1:])

'''
cd /data/sjnoh/pilot/bam/
python /data/Tools/etc/CONTRA/CONTRA.v2.0.6/baseline.py --target /data/sjnoh/simulation/cm_panel.bed --files \
changheoi.bam \
kangho.bam \
seungjae.bam \
--output /data/sjnoh/contra/pilot/baseline_m03/ --name male-baseline.bed

cd /data/sjnoh/pilot/bam/
python /data/Tools/etc/CONTRA/CONTRA.v2.0.6/baseline.py --target /data/sjnoh/simulation/cm_panel.bed --files \
bora.bam \
heeyeon.bam \
hyejin.bam \
--output /data/sjnoh/contra/pilot/baseline_f03/ --name female-baseline.bed
LabGScan-female3.bam \
'''
